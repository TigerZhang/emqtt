{application, emqtt,
 [
  {description, "erlang mqtt broker"},
  {vsn, "0.1.5"},
  {modules, [
	emqtt,
	emqtt_app,
	emqtt_auth,
	emqtt_auth_anonymous,
	emqtt_auth_internal,
	emqtt_client,
	emqtt_client_sup,
	emqtt_client_monitor,
	emqtt_ctl,
	emqtt_db,
	emqtt_frame,
	emqtt_lib,
	emqtt_listener,
	emqtt_net,
	emqtt_router,
	emqtt_registry,
	emqtt_sup,
	file_handle_cache,
	gen_server2,
	priority_queue,
	supervisor2,
	tcp_acceptor,
	tcp_acceptor_sup,
	tcp_listener,
	tcp_listener_sup
  ]},
  {registered, [emqtt_auth,
			    emqtt_router,
				emqtt_registry,
				emqtt_client_monitor]},
  {applications, [kernel,
                  stdlib]},
  {mod, {emqtt_app, []}},
  {env, [
    		{rabbitmqs, [
          		{msgbus_rabbitmq_local, [
			      {name,        "msgbus_rabbitmq_local"},
			      {exchange,    <<"msgbus_amqp_proxy">>},
			      {amqp_user,   <<"guest">>},
			      {amqp_pass,   <<"guest">>},
			      {amqp_vhost,  <<"/">>},
			      {amqp_host,   "localhost"},
			      {amqp_port,   5672}
			  	]}
  			]},
			{outgoing_queues, [
	      		{<<"1">>, <<"msgbus_mqtt_command">>},
                {<<"3">>, <<"msgbus_mqtt_command_publish">>},
                {<<"4">>, <<"msgbus_mqtt_command_puback">>},
                {<<"5">>, <<"msgbus_mqtt_command_pubrec">>},
                {<<"6">>, <<"msgbus_mqtt_command_pubrel">>},
                {<<"7">>, <<"msgbus_mqtt_command_pubcomp">>},
                {<<"8">>, <<"msgbus_mqtt_command">>},
                {<<"10">>, <<"msgbus_mqtt_command_unsubscribe">>},
                {<<"12">>, <<"msgbus_mqtt_command">>},
                {<<"14">>, <<"msgbus_mqtt_command_disconnect">>}
            ]},
      		{incoming_queues, [
      			{<<"msgbus_frontend_key_">>, <<"msgbus_frontend_queue_">>}
      			]},
      		{node_tag, <<"front1">>},
            {listeners, [
              {1883, [
                  binary,
                  {packet, raw},
                  {reuseaddr, true},
                  {backlog, 128},
                  {nodelay, true}
              ]}
            ]},
            {auth, {anonymous, []}}, %internal, anonymous
            {uid_url,"http://113.31.65.21:8181/device/uid/?client_id="}, %% clientid_to_uid service
      {force_correct_uid, false} %% false: 在 clientid_to_uid 没有配置或者出错时，产生一个随机 uid
                                 %% true: 在 clientid_to_uid 没有配置或者出错时，返回 clientid 不合法，断开当前链接
  	]}
 ]}.
